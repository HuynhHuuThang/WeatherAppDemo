trigger:
  - main

stages:
  - stage:
    displayName: AZ login and aks login
    jobs:
    - job:
      displayName:
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'HuynhHuuThangConnection'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az login --service-principal --username 6aec4f7-a399-44f1-9f25-85d891cf0265 --password T6E8Q~JWc26OX.ViH8ZUCsQwj90q.4rL2iNGHb-~ --tenant 93f33571-550f-43cf-b09f-cd331338d086
            az account set --subscription 508d78f4-b324-4fd2-8c65-97a16b34c52b
            az aks get-credentials -n demoaks -g demo --admin --overwrite-existing
        displayName: Az and aks connect
      # - task: Kubernetes@1
      #   inputs:
      #     connectionType: 'Azure Resource Manager'
      #     azureSubscriptionEndpoint: 'HuynhHuuThangConnection'
      #     azureResourceGroup: 'demo'
      #     kubernetesCluster: 'demoaks'
      #     useClusterAdmin: true
      #     namespace: 'default'
      #     command: 'apply'
      #     useConfigurationFile: true
      #     configuration: './App/deployment.yml'
      #     secretType: 'dockerRegistry'
      #     containerRegistryType: 'Azure Container Registry'
      # # - script: |
      # #     kubectl apply -f App/deployment.yml
      # #     kubectl apply -f Service/service.yml
      # #   displayName: Deploy Demo App
      # - script: |
      #     kubectl get deployment
      #     kubectl get service
      #     # IP=$(kubectl get service/servicename -o jsonpath='{.spec.clusterIP})
      #     # curl $(IP)/weather
      #   displayName: Checking App Status

